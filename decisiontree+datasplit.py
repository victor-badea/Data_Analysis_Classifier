# -*- coding: utf-8 -*-
"""ITM618VictorBadeaAssignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QyoSh_gDt5k5vZAhGq2LXOMuQnPDsOpO
"""

import pandas as pd

allData = pd.read_csv("/content/drive/MyDrive/CreditData.csv")

allData.sample(5)

!pip install category_encoders

print("status of checking accounts", allData.Status.unique())
print("credit history", allData.history.unique())
print("purpose of applying for a loan", allData.Purpose.unique())
print("savings account bonds", allData.Savings.unique())
print("present employment since", allData.employment.unique())
print("personal status of sex", allData.sex.unique())
print("other debtors/guarantors", allData.guarantors.unique())
print("property", allData.Property.unique())
print("other installment plans", allData.OtherInstallment.unique())
print("housing", allData.Housing.unique())
print("job", allData.Job.unique())
print("telephone", allData.Telephone.unique())
print("Foreign worker", allData.foreign.unique())

from category_encoders import OrdinalEncoder

Status_mapping = [{'col': 'Status', 'mapping': {'A11': 0, 'A12': 1, 'A13': 2, 'A14':4}}]
oe_Status = OrdinalEncoder(mapping=Status_mapping)
oe_Status.fit(allData['Status'])
allData['Status_val'] = oe_Status.transform(allData['Status'])

history_mapping = [{'col': 'history', 'mapping': {'A30': 0, 'A31': 1, 'A32': 2, 'A33':3, 'A34':4}}]
oe_history = OrdinalEncoder(mapping=history_mapping)
oe_history.fit(allData['history'])
allData['history_val'] = oe_history.transform(allData['history'])

Purpose_mapping = [{'col': 'Purpose', 'mapping': {'A40': 0, 'A41': 1, 'A42': 2, 'A43':3, 'A44':4, 'A45':5, 'A46':6, 'A47':7, 'A48':8, 'A49':9, 'A410':10}}]
oe_Purpose = OrdinalEncoder(mapping=Purpose_mapping)
oe_Purpose.fit(allData['Purpose'])
allData['Purpose_val'] = oe_Purpose.transform(allData['Purpose'])

Savings_mapping = [{'col': 'Savings', 'mapping': {'A61': 0, 'A62': 1, 'A63': 2, 'A64':3, 'A65':4}}]
oe_Savings = OrdinalEncoder(mapping=Savings_mapping)
oe_Savings.fit(allData['Savings'])
allData['Savings_val'] = oe_Savings.transform(allData['Savings'])

employment_mapping = [{'col': 'employment', 'mapping': {'A71': 0, 'A72': 1, 'A73': 2, 'A74':3, 'A75':4}}]
oe_employment = OrdinalEncoder(mapping=employment_mapping)
oe_employment.fit(allData['employment'])
allData['employment_val'] = oe_employment.transform(allData['employment'])

sex_mapping = [{'col': 'sex', 'mapping': {'A91': 0, 'A92': 1, 'A93': 2, 'A94':3}}]
oe_sex = OrdinalEncoder(mapping=sex_mapping)
oe_sex.fit(allData['sex'])
allData['sex_val'] = oe_sex.transform(allData['sex'])

guarantors_mapping = [{'col': 'guarantors', 'mapping': {'A101': 0, 'A102': 1, 'A103': 2}}]
oe_guarantors = OrdinalEncoder(mapping=guarantors_mapping)
oe_guarantors.fit(allData['guarantors'])
allData['guarantors_val'] = oe_guarantors.transform(allData['guarantors'])

Property_mapping = [{'col': 'Property', 'mapping': {'A121': 0, 'A122': 1, 'A123': 2, 'A124':3}}]
oe_Property = OrdinalEncoder(mapping=Property_mapping)
oe_Property.fit(allData['Property'])
allData['Property_val'] = oe_Property.transform(allData['Property'])

OtherInstallment_mapping = [{'col': 'OtherInstallment', 'mapping': {'A141': 0, 'A142': 1, 'A143': 2}}]
oe_OtherInstallment = OrdinalEncoder(mapping=OtherInstallment_mapping)
oe_OtherInstallment.fit(allData['OtherInstallment'])
allData['OtherInstallment_val'] = oe_OtherInstallment.transform(allData['OtherInstallment'])

Housing_mapping = [{'col': 'Housing', 'mapping': {'A151': 0, 'A152': 1, 'A153': 2}}]
oe_Housing = OrdinalEncoder(mapping=Housing_mapping)
oe_Housing.fit(allData['Housing'])
allData['Housing_val'] = oe_Housing.transform(allData['Housing'])

Job_mapping = [{'col': 'Job', 'mapping': {'A171': 0, 'A172': 1, 'A173': 2, 'A174':3}}]
oe_Job = OrdinalEncoder(mapping=Job_mapping)
oe_Job.fit(allData['Job'])
allData['Job_val'] = oe_Job.transform(allData['Job'])

Telephone_mapping = [{'col': 'Telephone', 'mapping': {'A191': 0, 'A192': 1}}]
oe_Telephone = OrdinalEncoder(mapping=Telephone_mapping)
oe_Telephone.fit(allData['Telephone'])
allData['Telephone_val'] = oe_Telephone.transform(allData['Telephone'])

foreign_mapping = [{'col': 'foreign', 'mapping': {'A201': 0, 'A202': 1}}]
oe_foreign = OrdinalEncoder(mapping=foreign_mapping)
oe_foreign.fit(allData['foreign'])
allData['foreign_val'] = oe_foreign.transform(allData['foreign'])

Approved_mapping = [{'col': 'Approved', 'mapping': {'No': 0, 'Yes': 1}}]
oe_Approved = OrdinalEncoder(mapping=Approved_mapping)
oe_Approved.fit(allData['Approved'])
allData['Approved_val'] = oe_Approved.transform(allData['Approved'])

from sklearn.model_selection import train_test_split
all_y = allData['Approved_val']
all_X = allData[['Status_val','Duration','history_val','Purpose_val','amount','Savings_val','employment_val','Installment','sex_val','guarantors_val','residence','Property_val','Age','OtherInstallment_val','Housing_val','ExistingCredits','Job_val','liable','Telephone_val','foreign_val']]
train_X, test_X, train_y, test_y = train_test_split(all_X, all_y, test_size=0.2, train_size=0.8,random_state=101)

train_X.head()

from sklearn import tree
clf = tree.DecisionTreeClassifier()

clf.fit(train_X, train_y)

predictions = clf.predict(test_X)

from sklearn.metrics import accuracy_score
print(accuracy_score(test_y, predictions))

pip install -U scikit-learn

tree1 = tree.DecisionTreeClassifier()
tree1.fit(train_X,train_y)

tree.plot_tree(tree1)

from sklearn.linear_model import LogisticRegression

lm = LogisticRegression()
lm.fit(train_X, train_y)

predicted_classes = lm.predict(test_X)

predicted_classes

actual_classes = test_y.values

actual_classes

sum(actual_classes == predicted_classes) / len(actual_classes)

from sklearn.metrics import confusion_matrix

confusion_matrix(actual_classes, predicted_classes)

tn, fp, fn, tp = confusion_matrix(actual_classes, predicted_classes).ravel()
(tn, fp, fn, tp)

test_recall = tp/(tp+fn)
print(test_recall)

test_precision = tp/(tp+fp)
print(test_precision)